set varnames <- make string array(0);
set varvals <- make any array(0);

set index <- 0;
set args <- make Expression array(0);
set watch <- make stopwatch::StopWatch();

function Interpret()
{
    while(index < statements->GetLength())
    {
        args <- ~statements[index]->Args;

        interpretInternal(statements[index], args);
        
        index++;
    }
}

function interpretInternal(stmt Statement, inargs ExpressionArr) any
{
    if (stmt->Cmd = "print")
    {
        var theValue <- GetValue(inargs[0]);
        Print(string(theValue));
        return string(theValue);
    }
    else if (stmt->Cmd = "write")
    {
        var theValue <- GetValue(inargs[0]);
        Write(string(theValue));
        return string(theValue);
    }
    else if (stmt->Cmd = "clear")
    {
        Clear();
        return 0;
    }
    else if (stmt->Cmd = "color")
    {
        var theValue <- GetValue(inargs[0]);
        SetConsoleForeground(int(theValue));
        return int(theValue);
    }
    else if (stmt->Cmd = "input")
    {
        return Input();
    }
    else if (stmt->Cmd = "set")
    {
        var theValue <- GetValue(inargs[1]);
        if (!VarExists(~inargs[0]->Value))
        {
            varnames->Push(~inargs[0]->Value);
            varvals->Push(theValue);
        }
        else
            SetVar(~inargs[0]->Value, theValue);

        return theValue;
    }
    else if (stmt->Cmd = "sleep")
    {
        var theValue <- GetValue(inargs[0]);
        Sleep(int(theValue));
        return int(theValue);
    }
    else if (stmt->Cmd = "goto")
    {
        ProcessGoto(~inargs[0]->Value);
        return 0;
    }
    else if (stmt->Cmd = "if")
    {
        var val0 <- GetValue(inargs[0]);
        var val1 <- GetValue(inargs[1]);
        var val2 <- GetValue(inargs[2]);

        if (string(val1) = "=") { if (val0 = val2) { ProcessGoto(~inargs[3]->Value); return 1; }}
        else if (string(val1) = "!=") { if (val0 != val2) { ProcessGoto(~inargs[3]->Value); return 1; }}
        else if (string(val1) = "<" ) { if (int(val0) < int(val2)) { ProcessGoto(~inargs[3]->Value); return 1; }}
        else if (string(val1) = ">" ) { if (int(val0) > int(val2)) {ProcessGoto(~inargs[3]->Value); return 1; }}
        else if (string(val1) = "<=") { if (int(val0) <= int(val2)) { ProcessGoto(~inargs[3]->Value); return 1; }}
        else if (string(val1) = ">=") { if (int(val0) >= int(val2)) { ProcessGoto(~inargs[3]->Value); return 1; }}
        return 0;
    }
    else if (stmt->Cmd = "add")
    {
        return int(GetValue(inargs[0])) + int(GetValue(inargs[1]));
    }
    else if (stmt->Cmd = "sub")
    {
        return int(GetValue(inargs[0])) - int(GetValue(inargs[1]));
    }
    else if (stmt->Cmd = "mul")
    {
        return int(GetValue(inargs[0])) * int(GetValue(inargs[1]));
    }
    else if (stmt->Cmd = "div")
    {
        return int(GetValue(inargs[0])) / int(GetValue(inargs[1]));
    }
    else if (stmt->Cmd = "con")
    {
        return string(GetValue(inargs[0])) + string(GetValue(inargs[1]));
    }
    else if (stmt->Cmd = "die")
    {
        die(0);
    }
    return "";
}

function GetValue(ex Expression) any
{
    if (ex->Type = "string") return ex->Value;
    if (ex->Type = "number") return int(ex->Value);
    if (ex->Type = "indentifier") return ex->Value;
    if (ex->Type = "operator") return ex->Value;
    if (ex->Type = "variable") return GetVar(ex->Value);
    if (ex->Type = "statement")
    {
        var eargs <- ~Statement(ex->Object)->Args
        return interpretInternal(Statement(ex->Object), eargs);
    }
    return nil;
}

function GetVar(name string) any
{
    from (index <- 0) to varnames->GetLength() -1
    {
        if ((varnames[index]) = name) return varvals[index];
    }

    Print("");
    SetConsoleForeground(12);
    Print("[!] Couldnt find Variable! Got: " + name);

    return nil;
}

function SetVar(name string, value any)
{
    from (index <- 0) to varnames->GetLength() -1
    {
        if ((varnames[index]) = name)
        {
            varvals[index] <- value;
            return;
        }
    }

    Print("");
    SetConsoleForeground(12);
    Print("[!] Couldnt find Variable! Got: " + name);
}

function ProcessGoto(name string)
{
    var found <- false;
    from (i <- 0) to statements->GetLength() -1
    {
        if (~statements[i]->Cmd = "label")
        {
            var iargs <- ~statements[i]->Args;

            if (GetValue(iargs[0]) = name)
            {
                found <- true;
                index <- i;
                break;
            }
        }
    }

    if (!found)
    {
        Print("");
        SetConsoleForeground(12);
        Print("[!] Couldnt find Lable! Got: " + ~args[0]->Value);
    }
}

function VarExists(name string) bool
{
    from (index <- 0) to varnames->GetLength() -1
    {
        if ((varnames[index]) = name) return true;
    }
    return false;
}